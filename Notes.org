
* data sources

** hydra

*** json API
can be accessed easily sending an extra http header to a hydra
urls. f.ex.

#+begin_src sh :results scalar
curl -H "Accept: application/json" http://hydra.nixos.org/project/hydra
#+end_src

#+RESULTS:
: {"owner":{"fullname":"Eelco Dolstra","username":"eelco"},
:  "name":"hydra",
:  "jobsets":[{"name":"hydra-ant-logger-trunk"},{"name":"hydra-master"},{"name":"trunk"}],
:  "description":"Hydra, the Nix-based continuous build system",
:  "homepage":"",
:  "views":[{"name":"unstable"}],
:  "releases":[{"timestamp":1267784594,"name":"hydra-ant-logger-2010.2"}],
:  "hidden":0,
:  "enabled":1,
:  "displayName":"Hydra"}

#+begin_src sh :results scalar
curl -H "Accept: application/json" http://hydra.nixos.org/build/5572564
#+end_src

#+RESULTS:
: {"project":"nixpkgs","stoptime":null,"job":"linux_3_2_apparmor.x86_64-linux","timestamp":1374580489,"jobset":"trunk","starttime":1374581643,"buildstatus":null,"id":5572564,"finished":0}

*** tree structure
Guided by structure of hydra's json API

**** hydra - basic structure
as closely ressembling hydra's json API
***** project (by name)
****** nixos
******* jobsets
******* releases
****** nixpkgs
******* jobsets list of names
***** jobset
***** eval

**** cross references - declarative way

Idee:

wrap_spec = dict(
    '/project/*/jobsets/': compose(references(source='/jobset/'), ...)
)

wrap_spec = {
    project: {
       '**': {
         'jobsets': references(source='/jobset')
       }
    }
}

with_references = references(plain, refspec=refspec)

* bugs
** ‚ù¢ "missed" parameters in command line interpretation
running the command ./bin/xin generation --profile test remove will
not set self.profile in the Generation.Remove subapplication but only
in the Generation application, which will not be used.
